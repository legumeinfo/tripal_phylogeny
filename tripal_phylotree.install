<?php
/**
* @file
* Installation of the phylotree module
*/

/**
* Implementation of hook_requirements().
*
* @ingroup tripal_phylotree
*/
function tripal_phylotree_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_phylotree'] = array(
        'title' => "tripal_phylotree",
        'value' => "ERROR: Chado must be installed before this module can be enabled",
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}


/* hook_enable()*/

function tripal_phylotree_enable(){
  $permissions = array('access chado_phylotree content');
  tripal_phylotree_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions);
  $permissions_anonym = array('access chado_phylotree content');
  tripal_phylotree_grant_permissions(DRUPAL_ANONYMOUS_RID, $permissions_anonym);
  $permissions_admin = array('administer tripal phylotree');
  tripal_phylotree_grant_permissions (DRUPAL_AUTHENTICATED_RID, $permissions_admin);
}


/**
* Implements hook_install()
* Allows installation of the tripal_gene module
*/
function tripal_phylotree_install() {

  // Add the vocabularies used by the phylotree module.
  tripal_phylotree_add_cvterms();

  $sql_count = "select count(f.feature_id) as count
  from feature f left join cvterm cvt
  on f.type_id=cvt.cvterm_id
  where cvt.name = :name";

  $args = array(':name' => 'polypeptide_domain');
  $result = chado_query($sql_count, $args)->fetchObject();

  $use_domain = ($result->count > 0);

  // add the materialized views
  if ($use_domain) {
    tripal_phylotree_add_tree2domain_mview();
  }

  tripal_phylotree_add_phylotree_count_mview($use_domain);

  // we want to integrate the materialized views so that they
  // are available for Drupal Views, upon which our search forms are built
  tripal_phylotree_integrate_view($use_domain);

  if ($use_domain) {
    $mview_id =  tripal_get_mview_id('tree2domain');
    print "\nPopulating tree2domain mview.....\n";
    tripal_populate_mview($mview_id);
  }

  $mview_id = tripal_get_mview_id('phylotree_count');
  print "\nPopulating phylotree_count mview.....\n";
  tripal_populate_mview($mview_id);
}


/**
* Implementation of hook_grant_permissions(). peu added
*/
function tripal_phylotree_grant_permissions($rid, array $permissions = array()) {

  // this line doesn't work on install / enable hooks
  $modules = user_permission_get_modules();
  // Grant new permissions for the role.
  foreach ($permissions as $name) {
    db_merge('role_permission')
    ->key(array(
      'rid' => $rid,
      'permission' => $name,
    ))
    ->fields(array(
      //hard-coded module name here as $modules was not working -peu
      'module' => 'tripal_phylotree',
    ))
    ->execute();
  }


  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}


/**
* Implementation of hook_schema().
* Standard tripal linker table between a node and a phylotree record.
* @ingroup tripal_phylotree
*/
function tripal_phylotree_schema() {
  $schema['chado_phylotree'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'phylotree_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      )
    ),
    'indexes' => array(
      'chado_phylotree_idx1' => array('phylotree_id')
    ),
    'unique keys' => array(
      'chado_phylotree_uq1' => array('nid', 'vid'),
      'chado_phylotree_uq2' => array('vid')
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
* Implementation of hook_uninstall().
*/
function tripal_phylotree_uninstall() {

  // Drop the MView table if it exists
  $mview_id =  tripal_get_mview_id('phylotree_count');
  if ($mview_id) {
    tripal_delete_mview($mview_id);
  }
  //Remove views integration
  // Note: tripal_remove_views_intergration accepts table_name and priority in a key value form.

  $delete_view=array(
    'table_name' => 'phylotree_count',
    'priority' => '-1',
  );
  tripal_remove_views_integration($delete_view);

  // Drop the MView table if it exists
  $mview_id =  tripal_get_mview_id('tree2domain');
  if ($mview_id) {
    tripal_delete_mview($mview_id);

    //Remove views integration
    // Note: tripal_remove_views_intergration accepts table_name and priority in a key value form.

    $delete_view=array(
      'table_name' => 'tree2domain',
      'priority' => '-1',
    );
    tripal_remove_views_integration($delete_view);
  }
}


function tripal_phylotree_add_phylotree_count_mview($with_domain = FALSE) {
  //Materialized view addition

  $sql_query = "WITH
                count_genes AS (SELECT count(*) count, t.phylotree_id FROM phylotree t, phylonode n WHERE n.phylotree_id=t.phylotree_id AND n.label IS NOT null GROUP BY t.phylotree_id),
                counts AS (SELECT t.phylotree_id as tree_id, organism_id, count(n.phylonode_id) AS count from phylotree t LEFT OUTER JOIN phylonode n ON n.phylotree_id=t.phylotree_id JOIN feature f ON f.feature_id = n.feature_id GROUP BY t.phylotree_id, organism_id),
                json_counts AS (SELECT tree_id, json_agg(json_build_object(organism_id, count)) AS counts_by_org FROM counts GROUP BY tree_id)
                SELECT
                phylotree.phylotree_id AS phylotree_phylotree_id,
                phylotree.name AS phylotree_name,
                phylotree.comment AS phylotree_comment,
                count_genes.count AS total_count,
                json_counts.counts_by_org AS counts_by_org
                FROM chado.phylotree phylotree
                LEFT JOIN chado_phylotree chado_phylotree ON phylotree.phylotree_id = chado_phylotree.phylotree_id
                LEFT JOIN count_genes count_genes ON phylotree.phylotree_id = count_genes.phylotree_id
                LEFT JOIN json_counts json_counts ON phylotree.phylotree_id = json_counts.tree_id";

  //Table Phylotree User Search  description

  $schema = array (
    'table' => 'phylotree_count',
    'fields' => array(
      'phylotree_phylotree_id' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'phylotree_name' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
      'phylotree_comment' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
      'total_count' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'counts_by_org' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('phylotree_phylotree_id'),
  );

  if ($with_domain) {
    $schema['fields']['domains_con'] = array (
        'type' => 'text',
        'not null' => false,
    );
    $schema['indexes'] = array (
      'phylotree_indx0' => array (
        0 => 'phylotree_name',
      ),
      'phylotree_indx2' => array (
        0 => 'domains_con',
      ),
    );
  }

  // add a comment to make sure this view makes sense to the site administator
  $comment = t('This view is used to provide a table for Phylotree User Search with total- and per species- counts.');
  tripal_add_mview(
    'phylotree_count', // name of materialized view
    'tripal_phylotree', // name of module submitting view
    $schema,      // schema api array representation
    $sql_query,         // sql query that loads the mview
    $comment );
}


function tripal_phylotree_add_tree2domain_mview() {
  //Materialized view addition

  $sql_t2d = "select string_agg(DISTINCT(f1.name),E' ') AS domains, t.phylotree_id, string_agg(DISTINCT(d.iprterm),E' ') AS ipr
  FROM feature f1
  JOIN cvterm cvt1
  ON cvt1.cvterm_id = f1.type_id
  JOIN featureloc
  ON featureloc.feature_id = f1.feature_id
  JOIN feature f2
  ON featureloc.srcfeature_id = f2.feature_id
  JOIN cvterm cvt2
  ON cvt2.cvterm_id = f2.type_id
  JOIN phylonode n
  ON n.feature_id=f2.feature_id
  JOIN phylotree t
  ON n.phylotree_id=t.phylotree_id
  JOIN domain d
  ON d.feature_name=f1.name
  WHERE cvt1.name in ('protein_hmm_match', 'protein_match') AND
  cvt2.name = 'polypeptide'
  GROUP BY t.phylotree_id";

  $schema_t2d = array (
    'table' => 'tree2domain',
    'fields' => array (
      'domains' => array (
        'type' => 'text',
        'not null' => false,
      ),
      'phylotree_id' => array (
        'type' => 'int',
        'not null' => 'FASLE',
      ),
      'ipr' => array (
        'type' => 'text',
        'not null' => false,
      ),

    ),
    'indexes' => array (
      't2d_indx0' => array (
        0 => 'phylotree_id',
      ),
    ),
  );

  $comment_t2d = t('This view is used to provide a helper table for mapping phylotrees to domains.
  The view is queried by the phylotree_count mview\'s sql so it needs to be created and populated before the population of phylotree_count mview.');

  tripal_add_mview(
    'tree2domain', // name of materialized view
    'tripal_phylotree', // name of module submitting view
    $schema_t2d,      // schema api array representation
    $sql_t2d,         // sql query that loads the mview
    $comment_t2d );
}

/**
* Integrate the materialized view for use by Drupal Views and
* our search form
*/

function tripal_phylotree_integrate_view($with_domain = FALSE){

  if ($with_domain) {
    $integration_t2d = array (
      'table' => 'tree2domain',
      'name' => 'tree2domain',
      'type' => 'chado',
      'description' => '',
      'priority' => '-1',
      'base_table' => '1',
      'fields' => array (
        'phylotree_id' => array (
          'name' => 'phylotree_id',
          'title' => 'phylotree_id',
          'description' => 'Phylotree ID',
          'type' => 'int',
          'handlers' => array (
            'filter' => array (
              'name' => 'views_handler_filter_numeric',
            ),
            'field' => array (
              'name' => 'views_handler_field_numeric',
            ),
            'sort' => array (
              'name' => 'views_handler_sort',
            ),
            'argument' => array (
              'name' => 'views_handler_argument_numeric',
            ),
            'relationship' => array (
              'name' => 'views_handler_relationship',
            ),
          ),
          'joins' => array (
          ),
        ),
        'domains' => array (
          'name' => 'domains',
          'title' => 'Domains',
          'description' => 'Domains',
          'type' => 'text',
          'handlers' => array (
            'filter' => array (
              'name' => 'tripal_views_handler_filter_select_string',
            ),
            'field' => array (
              'name' => 'views_handler_field',
            ),
            'sort' => array (
              'name' => 'views_handler_sort',
            ),
            'argument' => array (
              'name' => 'views_handler_argument_string',
            ),
            'relationship' => array (
              'name' => 'views_handler_relationship',
            ),
          ),
          'joins' => array (
          ),
        ),
      ),
    );
    // add the array above that will integrate our materialized view
    // for use with Drupal Views
    tripal_add_views_integration($integration_t2d);
  }

  $integration = array (
    'table' => 'phylotree_count',
    'name' => 'phylotree_count',
    'type' => 'chado',
    'description' => '',
    'priority' => '-1',
    'base_table' => '1',
    'fields' => array (
      'phylotree_phylotree_id' => array (
        'name' => 'phylotree_phylotree_id',
        'title' => 'Phylotree ID',
        'description' => 'Phylotree ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'phylotree_name' => array (
        'name' => 'phylotree_name',
        'title' => 'Family ID',
        'description' => 'Family ID',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'phylotree_comment' => array (
        'name' => 'phylotree_comment',
        'title' => 'Description',
        'description' => 'Description',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'total_count' => array (
        'name' => 'total_count',
        'title' => 'Total gene count',
        'description' => 'Total gene count',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'counts_by_org' => array (
        'name' => 'counts_by_org',
        'title' => 'Counts by organisms',
        'description' => 'Count by organims',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

    ),
  );

  if ($with_domain) {
    $integration['fields']['domains_con'] = array (
      'name' => 'domains_con',
      'title' => 'Domains_con',
      'description' => 'Domains_con',
      'type' => 'text',
      'handlers' => array (
        'filter' => array (
          'name' => 'tripal_views_handler_filter_select_string',
        ),
        'field' => array (
          'name' => 'views_handler_field',
        ),
        'sort' => array (
          'name' => 'views_handler_sort',
        ),
        'argument' => array (
          'name' => 'views_handler_argument_string',
        ),
        'relationship' => array (
          'name' => 'views_handler_relationship',
        ),
      ),
      'joins' => array (
      ),
    );
  }

  // add the array above that will integrate our materialized view
  // for use with Drupal Views
  tripal_add_views_integration($integration);
}




/**
 * Adds controlled vocabulary terms needed by this module.
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_add_cvterms() {

  tripal_insert_cv(
    'tripal_phylotree',
    'Terms used by the Tripal phylotree module for phylogenetic and taxonomic trees.'
  );

  // Add the terms used to identify nodes in the tree.
  tripal_insert_cvterm(
    array(
      'name' => 'phylo_leaf',
      'definition' => 'A leaf node in a phylogenetic tree.',
      'cv_name' => 'tripal_phylotree',
      'is_relationship' => 0,
      'db_name' => 'tripal'
    ),
    array('update_existing' => TRUE)
  );
  // Add the terms used to identify nodes in the tree.
  tripal_insert_cvterm(
    array(
      'name' => 'phylo_root',
      'definition' => 'The root node of a phylogenetic tree.',
      'cv_name' => 'tripal_phylotree',
      'is_relationship' => 0,
      'db_name' => 'tripal'
    ),
    array('update_existing' => TRUE)
  );
  // Add the terms used to identify nodes in the tree.
  tripal_insert_cvterm(
    array(
      'name' => 'phylo_interior',
      'definition' => 'An interior node in a phylogenetic tree.',
      'cv_name' => 'tripal_phylotree',
      'is_relationship' => 0,
      'db_name' => 'tripal'
    ),
    array('update_existing' => TRUE)
  );
}
